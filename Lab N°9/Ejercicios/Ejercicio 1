
#include<vector>
#include <iostream>

using namespace std;

class Figura{
    public:
    virtual double area() = 0;
    virtual double perimetro() = 0;
    virtual void mostrar() = 0;
};

class Circulo : public Figura {
private:
    double radio;

public:
    Circulo(double r) {
        radio = r;
    }
    
    double area() override {
        return 3.1416*radio*radio;
    }
    
    double perimetro () override {
        return 2*3.1416*radio;
    }
    
    void mostrar() override {
        cout << "Circulo"<< endl;
        cout << "Radio: " << radio << endl;
        cout << "PerÃ­metro: " << radio*2 <<endl;
    }
};

class Rectangulo : public Figura {
private:
    double lado;
    double base;

public:
    Rectangulo(double l, double b) {
        lado = l;
        base = b;
    }
    
    double area() override {
        return lado*base;
    }
    
    double perimetro () override {
        return 2*lado + 2*base;
    }
    
    void mostrar() override {
        cout << "Rectangulo"<< endl;
        cout << "Lado: " << lado << endl;
        cout << "Base: " <<  base <<endl;
    }
};

class Triangulo : public Figura {
private:
    double base, altura;
    vector<double> lados;
public:
    Triangulo(double base, double altura, vector<double> lados) 
        : base(base), altura(altura), lados(lados) {}
    
    double area() override {
        return 0.5 * base * altura;
    }
    
    double perimetro() override {
        double perimetro = 0;
        for (double lado : lados) {
            perimetro += lado;
        }
        return perimetro;
    }
};

int main()
{
    vector <Figura*> figuras;
    Figura* f1 = new Circulo(3.0);
    f1->mostrar();
    return 0;
}
