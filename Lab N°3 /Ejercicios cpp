#include <iostream>
#include <vector>
#include <string>

using namespace std;

class ITarea {
public:
    virtual void mostrarDetalles() const = 0;
    virtual ~ITarea() {}
};

class IProyecto {
public:
    virtual void mostrarDetalles() const = 0;
    virtual ~IProyecto() {}
};

class IComentario {
public:
    virtual void mostrarComentario() const = 0;
    virtual ~IComentario() {}
};

class IArchivo {
public:
    virtual void mostrarArchivo() const = 0;
    virtual ~IArchivo() {}
};

class TareaUsuario : public ITarea {
private:
    string descripcion;
public:
    TareaUsuario(const string& desc) : descripcion(desc) {}
    void mostrarDetalles() const override {
        cout << "Tarea: " << descripcion << endl;
    }
};

class ProyectoUsuario : public IProyecto {
private:
    string nombreProyecto;
public:
    ProyectoUsuario(const string& nombre) : nombreProyecto(nombre) {}
    void mostrarDetalles() const override {
        cout << "Proyecto: " << nombreProyecto << endl;
    }
};

class Comentario : public IComentario {
private:
    string comentario;
public:
    Comentario(const string& comentario) : comentario(comentario) {}
    void mostrarComentario() const override {
        cout << "Comentario: " << comentario << endl;
    }
};

class Archivo : public IArchivo {
private:
    string nombreArchivo;
public:
    Archivo(const string& nombre) : nombreArchivo(nombre) {}
    void mostrarArchivo() const override {
        cout << "Archivo: " << nombreArchivo << endl;
    }
};

class GestorTareas {
private:
    vector<ITarea*> tareas;
public:
    ~GestorTareas() {
        for (ITarea* tarea : tareas) {
            delete tarea;
        }
    }
    void agregarTarea(const string& descripcion) {
        tareas.push_back(new TareaUsuario(descripcion));
    }
    const vector<ITarea*>& obtenerTareas() const {
        return tareas;
    }
};

class GestorProyectos {
private:
    vector<IProyecto*> proyectos;
public:
    ~GestorProyectos() {
        for (IProyecto* proyecto : proyectos) {
            delete proyecto;
        }
    }
    void agregarProyecto(const string& nombre) {
        proyectos.push_back(new ProyectoUsuario(nombre));
    }
    const vector<IProyecto*>& obtenerProyectos() const {
        return proyectos;
    }
};

class VistaTareas {
public:
    static void mostrarTareas(const GestorTareas& gestor) {
        const vector<ITarea*>& tareas = gestor.obtenerTareas();
        if (tareas.empty()) {
            cout << "No hay tareas registradas." << endl;
            return;
        }
        cout << "\nLista de tareas:" << endl;
        for (const auto& tarea : tareas) {
            tarea->mostrarDetalles();
            cout << "------------------------" << endl;
        }
    }
};

class VistaProyectos {
public:
    static void mostrarProyectos(const GestorProyectos& gestor) {
        const vector<IProyecto*>& proyectos = gestor.obtenerProyectos();
        if (proyectos.empty()) {
            cout << "No hay proyectos registrados." << endl;
            return;
        }
        cout << "\nLista de proyectos:" << endl;
        for (const auto& proyecto : proyectos) {
            proyecto->mostrarDetalles();
            cout << "------------------------" << endl;
        }
    }
};

int main() {
    GestorTareas gestorTareas;
    GestorProyectos gestorProyectos;
    int opcionMenu;
    vector<string> lista = {
        "1. Agregar tarea",
        "2. Mostrar tareas",
        "3. Agregar proyecto",
        "4. Mostrar proyectos",
        "5. Salir"
    };

    do {
        cout << "\nMenú de Opciones:" << endl;
        for (const string &opcion : lista) {
            cout << opcion << endl;
        }

        cout << "Seleccione una opción: ";
        cin >> opcionMenu;
        cin.ignore();

        switch (opcionMenu) {
            case 1: {
                string descripcion;
                cout << "Ingrese la descripción de la tarea: ";
                getline(cin, descripcion);
                gestorTareas.agregarTarea(descripcion);
                cout << "Tarea agregada con éxito." << endl;
                break;
            }
            case 2: {
                VistaTareas::mostrarTareas(gestorTareas);
                break;
            }
            case 3: {
                string nombreProyecto;
                cout << "Ingrese el nombre del proyecto: ";
                getline(cin, nombreProyecto);
                gestorProyectos.agregarProyecto(nombreProyecto);
                cout << "Proyecto agregado con éxito." << endl;
                break;
            }
            case 4: {
                VistaProyectos::mostrarProyectos(gestorProyectos);
                break;
            }
            case 5: {
                cout << "Saliendo del menú..." << endl;
                break;
            }
            default: {
                cout << "Opción no válida. Intente de nuevo." << endl;
                break;
            }
        }
    } while (opcionMenu != 5);

    return 0;
}

